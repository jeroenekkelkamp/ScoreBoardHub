@page "/scoreboard/{ScoreboardName}"
@using Azure.Data.Tables
@using ScoreBoardHub.Components
@using ScoreBoardHub.Data
@using System.Globalization
@inject TableService TableService
@inject NavigationManager NavigationManager

<div class="scoreboard" style="background-image: url(@scoreboard.GetString("ImageUrl"));">
    <div class="content-wrapper">
        <button @onclick="GoBack" class="btn fixed-left">
            <i class="fas fa-arrow-left"></i> Back
        </button>
        <h1>@ScoreboardName</h1>
        <p>@scoreboard.GetString("Subtitle")</p>
    </div>
    <div class="content-wrapper">
        @if (isEditing || isAdding)
        {
            <ScoreEntryForm IsEditing="isEditing" ScoreEntry="selectedScoreEntry" OnScoreSaved="HandleFormClose" ScoreboardName="@ScoreboardName"/>
        }
        else
        {
            <div class="controls">
                <div class="add-score-control">
                    <button class="btn btn-primary" @onclick="OpenAddScoreForm">
                        <i class="fas fa-plus"></i> Add Score
                    </button>
                </div>
                <div class="amount-selector">
                    <label>Scores per page:</label>
                    <InputNumber @bind-Value="scoresPerPage" />
                </div>
            </div>
            <CascadingValue Value="scoreEntries">
                <PaginatedScoreList OnScoreEntrySelected="EditScoreEntry" PageItemCount="scoresPerPage"/>
            </CascadingValue>
        }
    </div>
</div>

@code {
    [Parameter]
    public string ScoreboardName { get; set; }

    private int scoresPerPage = 10;
    private bool isEditing;
    private bool isAdding;
    private TableEntity scoreboard = new();
    private TableEntity selectedScoreEntry;
    private IEnumerable<TableEntity> scoreEntries = new List<TableEntity>();

    private void GoBack()
    {
        if (!isEditing && !isAdding) NavigationManager.NavigateTo("/");
        HandleFormClose();
    }

    protected override async Task OnInitializedAsync()
    {
        scoreboard = await TableService.GetScoreBoardByName(ScoreboardName);
        scoreEntries = (await TableService.GetScoreBoardEntries(ScoreboardName))
                        .OrderByDescending(x => x.GetInt32("Score"));
    }

    private void EditScoreEntry(TableEntity entry)
    {
        selectedScoreEntry = entry;
        isEditing = true;
        isAdding = false;
    }

    private void OpenAddScoreForm()
    {
        selectedScoreEntry = new();
        isEditing = false;
        isAdding = true;
    }

    private void HandleFormClose()
    {
        isEditing = false;
        isAdding = false;
    }
}