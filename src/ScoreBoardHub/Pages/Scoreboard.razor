@page "/scoreboard/{ScoreboardName}"
@using Azure.Data.Tables
@using ScoreBoardHub.Data
@using System.Globalization
@inject TableService TableService
@inject NavigationManager NavigationManager

<div class="scoreboard" style="background-image: url(@scoreboard.GetString("ImageUrl"));">
    <div class="content-wrapper">
        <button @onclick="GoBack" class="btn fixed-left">
            <i class="fas fa-arrow-left"></i> Back
        </button>
        <h1>@ScoreboardName</h1>
        <p>@scoreboard.GetString("Subtitle")</p>
    </div>
    <div class="content-wrapper">
        @if (isEditing || isAdding)
        {
            <ScoreEntryForm IsEditing="isEditing" ScoreEntry="selectedScoreEntry" OnScoreSaved="HandleFormClose" ScoreboardName="@ScoreboardName" />
        }
        else
        {
            @if (scoreEntries.Any())
            {
                var index = 1;
                <div class="score-wrapper">
                    @foreach (var entry in scoreEntries)
                    {
                        <div class="score-entry" @onclick="() => EditScoreEntry(entry)">
                            <div>@index</div>
                            <div>@entry.GetString("PlayerName")</div>
                            <div class="fixed-text">@String.Format(CultureInfo.InvariantCulture, "{0:0,0}", entry.GetInt32("Score"))</div>
                        </div>
                        index++;
                    }
                </div>

            }
            else
            {
                <p>No scores found</p>
            }
            <p>Click on a score entry to edit the score, or:</p>
            <button class="btn btn-primary" @onclick="OpenAddScoreForm">
                <i class="fas fa-plus"></i> Add Score
            </button>
        }
    </div>
</div>

@code {

    [Parameter]
    public string ScoreboardName { get; set; }

    private bool isEditing;
    private bool isAdding;
    private TableEntity scoreboard = new();
    private TableEntity selectedScoreEntry;
    private IEnumerable<TableEntity> scoreEntries = new List<TableEntity>();

    private void GoBack()
    {
        if (!isEditing && !isAdding) NavigationManager.NavigateTo("/");
        HandleFormClose();
    }

    protected override async Task OnInitializedAsync()
    {
        scoreboard = await TableService.GetScoreBoardByName(ScoreboardName);
        scoreEntries = (await TableService.GetScoreBoardEntries(ScoreboardName))
                        .OrderByDescending(x => x.GetInt32("Score"));
    }

    private void EditScoreEntry(TableEntity entry)
    {
        selectedScoreEntry = entry;
        isEditing = true;
        isAdding = false;
    }

    private void OpenAddScoreForm()
    {
        selectedScoreEntry = null;
        isEditing = false;
        isAdding = true;
    }

    private void HandleFormClose()
    {
        isEditing = false;
        isAdding = false;
        StateHasChanged();
    }
}