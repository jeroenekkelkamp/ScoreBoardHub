@page "/scoreboard/{ScoreboardName}"
@using Azure.Data.Tables
@using ScoreBoardHub.Data
@inject TableService TableService
@inject NavigationManager NavigationManager

<div class="content-wrapper">
    <button @onclick="GoBack" class="btn fixed-left">
        <i class="fas fa-arrow-left"></i> Back
    </button>
    <h1>@ScoreboardName</h1>
</div>
<div class="content-wrapper">

    @if (isEditing || isAdding)
    {
        <ScoreEntryForm IsEditing="isEditing" ScoreEntry="selectedScoreEntry" OnScoreSaved="HandleFormClose" ScoreboardName="@ScoreboardName"/>
    }
    else
    {
        @if (scoreEntries.Any())
        {
            var index = 1;
            <div class="score-wrapper">
                @foreach (var entry in scoreEntries)
                {
                    <div class="score-entry" @onclick="() => EditScoreEntry(entry)">
                        <div class="fixed-text">@index</div>
                        <div>@entry.GetString("PlayerName")</div>
                        <div class="fixed-text">@entry.GetInt32("Score")</div>
                    </div>
                    index++;
                }
            </div>

        }
        else
        {
            <p>No scores found</p>
        }
        <button class="btn btn-primary" @onclick="OpenAddScoreForm">
            <i class="fas fa-plus"></i> Add Score
        </button>
    }
</div>

@code {

    [Parameter]
    public string ScoreboardName { get; set; }

    private bool isEditing;
    private bool isAdding;
    private TableEntity selectedScoreEntry;

    private void GoBack()
    {
        if (!isEditing && !isAdding) NavigationManager.NavigateTo("/");
        HandleFormClose();
    }

    private IEnumerable<TableEntity> scoreEntries = new List<TableEntity>();

    protected override async Task OnInitializedAsync()
    {
        scoreEntries = await TableService.GetScoreBoardEntries(ScoreboardName);
        scoreEntries = scoreEntries.OrderByDescending(x => x.GetInt32("Score"));
    }

    private void EditScoreEntry(TableEntity entry)
    {
        selectedScoreEntry = entry;
        isEditing = true;
        isAdding = false;
    }

    private void OpenAddScoreForm()
    {
        selectedScoreEntry = null;
        isEditing = false;
        isAdding = true;
    }

    private void HandleFormClose()
    {
        isEditing = false;
        isAdding = false;
        StateHasChanged();
    }

}